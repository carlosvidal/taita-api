datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PublishStatus {
  DRAFT
  PUBLISHED
}

generator client {
  provider = "prisma-client-js"
}

enum UserRole {
  ADMIN
  AUTHOR
  SUPER_ADMIN
}

enum Plan {
  FREE
  PRO
}

enum BlogUserRole {
  OWNER
  EDITOR
  CONTRIBUTOR
}

enum EmailType {
  REGULAR
  BURNER
  DISPOSABLE
}


enum CommentStatus {
  PENDING
  APPROVED
  REJECTED
  SPAM
}

model Admin {
  id       Int     @id @default(autoincrement())
  uuid     String  @default(uuid()) @unique
  email    String  @unique
  isBurnerEmail Boolean @default(false)
  emailType EmailType @default(REGULAR)
  emailVerified Boolean @default(false)
  emailDomain String?
  password String
  name     String?
  bio      String?
  picture  String?
  role     UserRole @default(AUTHOR) // Global role (SuperAdmin)

  blog     Blog?

  posts    Post[]    @relation("PostAuthor")
  pages    Page[]    @relation("PageAuthor")
  series   Series[]  @relation("SeriesAuthor")

  passwordResetToken PasswordResetToken?
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  token     String   @unique
  expiresAt DateTime
  user      Admin    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Blog {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @unique
  name      String
  subdomain String?  // Ej: "miblog" para miblog.tu-dominio.com
  domain    String?  // Ej: "midominio.com" para dominios propios
  title     String?  // Título del blog
  description String? // Descripción
  language  String?  // Idioma (ej: 'es')
  template  String?  // Plantilla visual
  googleAnalyticsId String? // ID de Google Analytics
  socialNetworks Json? // Redes sociales (JSON)
  timezone  String?  @default("America/Lima") // Zona horaria del blog

  plan      Plan     @default(FREE)
  subscriptionId String? // ID de la suscripción en el sistema de pagos
  subscriptionStatus String? // Estado de la suscripción: ACTIVE, CANCELED, PENDING, NONE
  nextPaymentDate DateTime? // Fecha del próximo pago
  adminId   Int?   @unique
  admin     Admin? @relation(fields: [adminId], references: [id])
  posts     Post[]
  pages     Page[]
  categories Category[]
  tags      Tag[]
  comments  Comment[]
  series    Series[]
  media     Media[]
  menuItems MenuItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}



model Post {
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  id             Int      @id @default(autoincrement())
  uuid           String   @default(uuid()) @unique
  title          String
  content        String
  excerpt        String?
  slug           String   @unique
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  category       Category? @relation(fields: [categoryId], references: [id])
  categoryId     Int?
  postTags       PostTag[]
  image          String?  // Path to featured image
  imageId        Int?     // Reference to Media model
  thumbnail      String?  // Optional thumbnail path
  status         PublishStatus @default(DRAFT)
  publishedAt    DateTime?
  author         Admin    @relation("PostAuthor", fields: [authorId], references: [id])
  authorId       Int
  series         Series?  @relation(fields: [seriesId], references: [id])
  seriesId       Int?
  sequenceNumber Int?     // Orden dentro de la serie
  comments       Comment[]
}

model Category {
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  id        Int    @id @default(autoincrement())
  uuid      String @default(uuid()) @unique
  name      String
  slug      String
  posts     Post[]

  // La combinación de name y blogId debe ser única
  @@unique([name, blogId], name: "category_name_blog_id_unique")
  @@unique([slug, blogId], name: "category_slug_blog_id_unique")
}

model Tag {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @unique
  name      String
  slug      String
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  postTags  PostTag[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([name, blogId], name: "tag_name_blog_id_unique")
  @@unique([slug, blogId], name: "tag_slug_blog_id_unique")
}

model PostTag {
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  addedAt   DateTime @default(now())

  @@id([postId, tagId])
}

model Page {
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @unique
  title     String
  slug      String   @unique
  content   String
  excerpt   String?
  image     String?  // Path to featured image
  imageId   Int?     // Reference to Media model
  status    PublishStatus @default(DRAFT)
  publishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    Admin    @relation("PageAuthor", fields: [authorId], references: [id])
  authorId  Int
}


model Series {
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid()) @unique
  title       String
  slug        String   @unique
  description String?
  coverImage  String?  // Path to cover image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  author      Admin    @relation("SeriesAuthor", fields: [authorId], references: [id])
  authorId    Int
  posts       Post[]
}



model MenuItem {
  id        Int      @id @default(autoincrement())
  uuid      String   @default(uuid()) @unique
  label     String
  url       String
  order     Int
  parentId  Int?
  parent    MenuItem?  @relation("MenuItemToMenuItem", fields: [parentId], references: [id])
  children  MenuItem[] @relation("MenuItemToMenuItem")
  
  // Relación con Blog
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
}

model Media {
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  id          Int      @id @default(autoincrement())
  uuid        String   @default(uuid()) @unique
  filename    String
  originalName String
  mimeType    String
  path        String
  size        Int
  entityType  String?
  entityId    String?
  variants    String?
  cloudinaryId String? // Cloudinary public ID
  cloudinaryUrl String? // Cloudinary secure URL
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Comment {
  blog      Blog     @relation(fields: [blogId], references: [id])
  blogId    Int
  id           Int           @id @default(autoincrement())
  uuid         String        @unique @default(uuid())
  postId       Int?
  post         Post?         @relation(fields: [postId], references: [id])
  authorName   String
  authorEmail  String
  content      String
  createdAt    DateTime      @default(now())
  status       CommentStatus @default(PENDING)
  ip           String
  isSuspect    Boolean       @default(false)
  honeypot     String?
}
